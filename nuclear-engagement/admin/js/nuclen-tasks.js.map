{"version":3,"file":"nuclen-tasks.js","sources":["../../../src/admin/ts/tasks.ts"],"sourcesContent":["/**\r\n * Nuclear Engagement Tasks Page JavaScript\r\n */\r\n\r\nimport { error } from '../../shared/logger';\r\n\r\ndeclare const ajaxurl: string;\r\ndeclare const nuclen_tasks: {\r\n    nonce: string;\r\n    i18n: {\r\n        running: string;\r\n        cancelling: string;\r\n        error: string;\r\n        success: string;\r\n    };\r\n};\r\n\r\nclass TasksManager {\r\n    private isProcessing = false;\r\n    private isRefreshing = false;\r\n    private currentPage = 1;\r\n\r\n    constructor() {\r\n        this.init();\r\n    }\r\n\r\n    private init(): void {\r\n        // Check for recent completions on page load\r\n        this.checkRecentCompletions();\r\n        \r\n        // Attach event listeners to action buttons\r\n        this.attachActionHandlers();\r\n        \r\n        // Convert the refresh link to a button with AJAX functionality\r\n        this.setupRefreshButton();\r\n    }\r\n\r\n    private attachActionHandlers(): void {\r\n        // Handle run now buttons\r\n        document.querySelectorAll('.nuclen-run-now').forEach(button => {\r\n            button.addEventListener('click', (e) => this.handleRunTask(e));\r\n        });\r\n\r\n        // Handle cancel buttons\r\n        document.querySelectorAll('.nuclen-cancel').forEach(button => {\r\n            button.addEventListener('click', (e) => this.handleCancelTask(e));\r\n        });\r\n    }\r\n\r\n    private setupRefreshButton(): void {\r\n        // Find the refresh link\r\n        const refreshLink = document.querySelector('a[href*=\"refresh=1\"]');\r\n        if (!refreshLink) return;\r\n\r\n        // Get current page from URL if available\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        this.currentPage = parseInt(urlParams.get('paged') || '1', 10);\r\n\r\n        // Convert to button\r\n        const refreshButton = document.createElement('button');\r\n        refreshButton.className = 'button button-small nuclen-refresh-button';\r\n        refreshButton.innerHTML = '<span class=\"dashicons dashicons-update\"></span> Refresh';\r\n        refreshButton.title = 'Refresh task data';\r\n        \r\n        // Replace link with button\r\n        refreshLink.parentNode?.replaceChild(refreshButton, refreshLink);\r\n        \r\n        // Add click handler\r\n        refreshButton.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n            this.refreshTasksData();\r\n        });\r\n    }\r\n\r\n    private refreshTasksData(): void {\r\n        // Just reload the page to get fresh data\r\n        window.location.reload();\r\n    }\r\n\r\n    private updateTasksTable(tasks: any[]): void {\r\n        const tbody = document.querySelector('.nuclen-tasks-table tbody');\r\n        if (!tbody || tasks.length === 0) return;\r\n\r\n        // Update each task row\r\n        tasks.forEach(task => {\r\n            const row = tbody.querySelector(`tr[data-task-id=\"${task.id}\"]`);\r\n            if (!row) return;\r\n\r\n            // Update status\r\n            const statusCell = row.querySelector('.column-status');\r\n            if (statusCell) {\r\n                statusCell.innerHTML = this.getStatusBadge(task.status);\r\n            }\r\n\r\n            // Update progress\r\n            const progressCell = row.querySelector('.column-progress');\r\n            if (progressCell) {\r\n                progressCell.innerHTML = `\r\n                    <div class=\"nuclen-progress-container\">\r\n                        <div class=\"nuclen-progress-bar\">\r\n                            <div class=\"nuclen-progress-fill\" style=\"width: ${task.progress}%\"></div>\r\n                        </div>\r\n                        <span class=\"nuclen-progress-text\">${task.progress}%</span>\r\n                    </div>\r\n                `;\r\n            }\r\n\r\n            // Update details\r\n            const detailsCell = row.querySelector('td:nth-child(5)'); // Details column\r\n            if (detailsCell) {\r\n                let detailsHTML = task.details;\r\n                if (task.failed > 0) {\r\n                    detailsHTML += `<br><span class=\"nuclen-error-text\">${task.failed} failed</span>`;\r\n                }\r\n                detailsCell.innerHTML = detailsHTML;\r\n            }\r\n\r\n\r\n            // Update actions based on status\r\n            this.updateActionButtons(row as HTMLElement, task.status);\r\n        });\r\n    }\r\n\r\n    private async handleRunTask(event: Event): Promise<void> {\r\n        event.preventDefault();\r\n        const button = event.currentTarget as HTMLElement;\r\n        const taskId = button.getAttribute('data-task-id');\r\n        \r\n        if (!taskId || this.isProcessing) return;\r\n        \r\n        await this.executeTaskAction('run_task', taskId, button);\r\n    }\r\n\r\n    private async handleCancelTask(event: Event): Promise<void> {\r\n        event.preventDefault();\r\n        const button = event.currentTarget as HTMLElement;\r\n        const taskId = button.getAttribute('data-task-id');\r\n        \r\n        if (!taskId || this.isProcessing) return;\r\n        \r\n        if (!window.confirm('Are you sure you want to cancel this task?')) {\r\n            return;\r\n        }\r\n        \r\n        await this.executeTaskAction('cancel_task', taskId, button);\r\n    }\r\n\r\n    private async executeTaskAction(action: string, taskId: string, button: HTMLElement): Promise<void> {\r\n        this.isProcessing = true;\r\n        const originalText = button.textContent || '';\r\n        const row = button.closest('tr');\r\n        \r\n        try {\r\n            // Update button state\r\n            button.classList.add('disabled');\r\n            button.setAttribute('disabled', 'disabled');\r\n            \r\n            if (action === 'run_task') {\r\n                button.textContent = nuclen_tasks.i18n.running || 'Running...';\r\n            } else {\r\n                button.textContent = nuclen_tasks.i18n.cancelling || 'Cancelling...';\r\n            }\r\n\r\n            // Make AJAX request\r\n            const response = await fetch(ajaxurl, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/x-www-form-urlencoded',\r\n                },\r\n                body: new URLSearchParams({\r\n                    action: `nuclen_${action}`,\r\n                    task_id: taskId,\r\n                    nonce: nuclen_tasks.nonce\r\n                })\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (result.success) {\r\n                // Show success message\r\n                this.showNotice(result.data.message || nuclen_tasks.i18n.success, 'success');\r\n                \r\n                // Show additional notice about refreshing\r\n                if (action === 'run_task') {\r\n                    setTimeout(() => {\r\n                        this.showNotice('Task is now processing. Refresh later to see the latest progress.', 'info');\r\n                    }, 500);\r\n                }\r\n                \r\n                // Update the row status locally\r\n                if (row) {\r\n                    // For run_task, immediately show processing status\r\n                    if (action === 'run_task') {\r\n                        const statusCell = row.querySelector('.column-status');\r\n                        if (statusCell) {\r\n                            statusCell.innerHTML = this.getStatusBadge('processing');\r\n                        }\r\n                        // Update action buttons to show spinner\r\n                        this.updateActionButtons(row as HTMLElement, 'processing');\r\n                    } else if (action === 'cancel_task') {\r\n                        // For cancel, show cancelled status\r\n                        const statusCell = row.querySelector('.column-status');\r\n                        if (statusCell) {\r\n                            statusCell.innerHTML = this.getStatusBadge('cancelled');\r\n                        }\r\n                        // Remove action buttons\r\n                        const actionsCell = row.querySelector('.column-actions');\r\n                        if (actionsCell) {\r\n                            actionsCell.innerHTML = '<span class=\"nuclen-no-actions\">â€”</span>';\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                throw new Error(result.data?.message || result.data || nuclen_tasks.i18n.error);\r\n            }\r\n\r\n        } catch (err) {\r\n            error('Task action failed:', err);\r\n            this.showNotice(err instanceof Error ? err.message : nuclen_tasks.i18n.error, 'error');\r\n            \r\n            // Restore button state\r\n            button.textContent = originalText;\r\n            button.classList.remove('disabled');\r\n            button.removeAttribute('disabled');\r\n        } finally {\r\n            this.isProcessing = false;\r\n        }\r\n    }\r\n\r\n    private getStatusBadge(status: string): string {\r\n        const badges: Record<string, string> = {\r\n            'pending': '<span class=\"nuclen-badge nuclen-badge-warning\">Pending</span>',\r\n            'processing': '<span class=\"nuclen-badge nuclen-badge-info\">Processing</span>',\r\n            'completed': '<span class=\"nuclen-badge nuclen-badge-success\">Completed</span>',\r\n            'completed_with_errors': '<span class=\"nuclen-badge nuclen-badge-warning\">Completed with Errors</span>',\r\n            'failed': '<span class=\"nuclen-badge nuclen-badge-error\">Failed</span>',\r\n            'cancelled': '<span class=\"nuclen-badge nuclen-badge-default\">Cancelled</span>'\r\n        };\r\n        \r\n        return badges[status] || `<span class=\"nuclen-badge nuclen-badge-default\">${status}</span>`;\r\n    }\r\n\r\n    private updateActionButtons(row: HTMLElement, status: string): void {\r\n        const actionsCell = row.querySelector('.column-actions');\r\n        if (!actionsCell) return;\r\n\r\n        // Clear existing actions\r\n        actionsCell.innerHTML = '';\r\n\r\n        if (status === 'pending') {\r\n            const taskId = row.getAttribute('data-task-id');\r\n            if (taskId) {\r\n                actionsCell.innerHTML = `\r\n                    <button class=\"button button-small nuclen-run-now\" data-task-id=\"${taskId}\">\r\n                        Run Now\r\n                    </button>\r\n                    <button class=\"button button-small nuclen-cancel\" data-task-id=\"${taskId}\">\r\n                        Cancel\r\n                    </button>\r\n                `;\r\n                \r\n                // Re-attach event handlers\r\n                actionsCell.querySelector('.nuclen-run-now')?.addEventListener('click', (e) => this.handleRunTask(e));\r\n                actionsCell.querySelector('.nuclen-cancel')?.addEventListener('click', (e) => this.handleCancelTask(e));\r\n            }\r\n        } else if (status === 'processing') {\r\n            const taskId = row.getAttribute('data-task-id');\r\n            if (taskId) {\r\n                actionsCell.innerHTML = `\r\n                    <span class=\"spinner is-active\"></span>\r\n                    <button class=\"button button-small nuclen-cancel\" data-task-id=\"${taskId}\">\r\n                        Cancel\r\n                    </button>\r\n                `;\r\n                // Re-attach cancel event handler\r\n                actionsCell.querySelector('.nuclen-cancel')?.addEventListener('click', (e) => this.handleCancelTask(e));\r\n            }\r\n        } else {\r\n            actionsCell.innerHTML = '<span class=\"nuclen-no-actions\">â€”</span>';\r\n        }\r\n    }\r\n\r\n    private showNotice(message: string, type: 'success' | 'error' | 'info' = 'info'): void {\r\n        // Check if there's an existing notice container\r\n        let noticeContainer = document.querySelector('.nuclen-tasks-notices');\r\n        if (!noticeContainer) {\r\n            // Create notice container\r\n            noticeContainer = document.createElement('div');\r\n            noticeContainer.className = 'nuclen-tasks-notices';\r\n            const pageTitle = document.querySelector('.wrap h1');\r\n            if (pageTitle) {\r\n                pageTitle.insertAdjacentElement('afterend', noticeContainer);\r\n            }\r\n        }\r\n\r\n        // Create notice element\r\n        const notice = document.createElement('div');\r\n        notice.className = `notice notice-${type} is-dismissible`;\r\n        notice.innerHTML = `\r\n            <p>${message}</p>\r\n            <button type=\"button\" class=\"notice-dismiss\">\r\n                <span class=\"screen-reader-text\">Dismiss this notice.</span>\r\n            </button>\r\n        `;\r\n\r\n        // Add to container\r\n        noticeContainer.appendChild(notice);\r\n\r\n        // Handle dismiss\r\n        notice.querySelector('.notice-dismiss')?.addEventListener('click', () => {\r\n            notice.remove();\r\n        });\r\n\r\n        // Auto-dismiss after 5 seconds\r\n        setTimeout(() => {\r\n            notice.remove();\r\n        }, 5000);\r\n    }\r\n\r\n    \r\n    private async checkRecentCompletions(): Promise<void> {\r\n        try {\r\n            const response = await fetch(ajaxurl, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/x-www-form-urlencoded',\r\n                },\r\n                body: new URLSearchParams({\r\n                    action: 'nuclen_get_recent_completions',\r\n                    nonce: nuclen_tasks.nonce\r\n                })\r\n            });\r\n\r\n            const result = await response.json();\r\n            \r\n            if (result.success && result.data && result.data.length > 0) {\r\n                // Show notifications for recent completions\r\n                result.data.forEach((completion: any) => {\r\n                    let message: string;\r\n                    let type: 'success' | 'error' | 'info';\r\n                    \r\n                    if (completion.status === 'completed') {\r\n                        message = `Generation ${completion.task_id} completed successfully!`;\r\n                        type = 'success';\r\n                    } else if (completion.status === 'completed_with_errors') {\r\n                        const failCount = completion.fail_count || 'some';\r\n                        message = `Generation ${completion.task_id} completed with ${failCount} errors. Check individual posts for details.`;\r\n                        type = 'info';\r\n                    } else if (completion.status === 'failed') {\r\n                        message = `Generation ${completion.task_id} failed.`;\r\n                        type = 'error';\r\n                    } else {\r\n                        return; // Skip unknown statuses\r\n                    }\r\n                    \r\n                    // Disabled for now - will be re-enabled later\r\n                    // this.showNotice(message, type);\r\n                });\r\n            }\r\n        } catch (err) {\r\n            error('Failed to check recent completions:', err);\r\n        }\r\n    }\r\n}\r\n\r\n// Initialize when DOM is ready\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    new TasksManager();\r\n});\r\n\r\n// Export for testing\r\nexport default TasksManager;"],"names":["TasksManager","__publicField","button","e","refreshLink","urlParams","refreshButton","_a","tasks","tbody","task","row","statusCell","progressCell","detailsCell","detailsHTML","event","taskId","action","originalText","result","actionsCell","err","error","status","_b","_c","message","type","noticeContainer","pageTitle","notice","completion","failCount"],"mappings":"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"}