var m=Object.defineProperty;var w=(c,e,t)=>e in c?m(c,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):c[e]=t;var l=(c,e,t)=>w(c,typeof e!="symbol"?e+"":e,t);import{l as u,e as h}from"../../logger-DwRZMuf8.js";class T{constructor(){l(this,"isProcessing",!1);l(this,"isRefreshing",!1);l(this,"currentPage",1);l(this,"pollingTimer",null);l(this,"pollingStartTime",0);l(this,"isPageVisible",!0);l(this,"lastTasksData",new Map);l(this,"pollingConfig",{initialInterval:15e3,intervals:[{after:6e4,interval:3e4},{after:3e5,interval:6e4},{after:6e5,interval:12e4}],maxInterval:3e5});l(this,"activeTasks",new Set);l(this,"pollingIndicator",null);l(this,"autoRefreshBanner",null);l(this,"nextPollTime",0);l(this,"countdownInterval",null);l(this,"handleVisibilityChange",this.onVisibilityChange.bind(this));l(this,"handleWindowBlur",this.onWindowBlur.bind(this));l(this,"handleWindowFocus",this.onWindowFocus.bind(this));console.log("[Nuclear Engagement] TasksManager initializing..."),this.init(),window.addEventListener("beforeunload",()=>{this.cleanup()})}init(){console.log("[Nuclear Engagement] Starting initialization..."),this.checkRecentCompletions(),this.attachActionHandlers(),this.setupRefreshButton(),this.setupPageVisibilityHandling(),this.initializeTaskTracking(),console.log("[Nuclear Engagement] Creating polling indicator..."),this.createPollingIndicator(),console.log("[Nuclear Engagement] Starting smart polling..."),this.startSmartPolling()}setupPageVisibilityHandling(){document.addEventListener("visibilitychange",this.handleVisibilityChange),window.addEventListener("blur",this.handleWindowBlur),window.addEventListener("focus",this.handleWindowFocus)}onVisibilityChange(){this.isPageVisible=!document.hidden,u(`Page visibility changed: ${this.isPageVisible?"visible":"hidden"}`),this.isPageVisible?this.activeTasks.size>0&&this.startSmartPolling():this.stopPolling()}onWindowBlur(){this.isPageVisible=!1,this.stopPolling()}onWindowFocus(){this.isPageVisible=!0,this.activeTasks.size>0&&(this.refreshTasksData().catch(e=>{h("Failed to refresh on focus:",e)}),this.startSmartPolling())}initializeTaskTracking(){document.querySelectorAll(".nuclen-tasks-table tbody tr").forEach(t=>{var a;const s=t.getAttribute("data-task-id"),n=t.querySelector(".column-status");if(s&&n){const i=((a=n.textContent)==null?void 0:a.toLowerCase())||"";(i.includes("processing")||i.includes("pending")||i.includes("scheduled"))&&this.activeTasks.add(s),this.lastTasksData.set(s,this.extractTaskDataFromRow(t))}}),u(`Initialized task tracking: ${this.activeTasks.size} active tasks`)}extractTaskDataFromRow(e){var r,d,g,p;const t=e.getAttribute("data-task-id")||"",s=e.querySelector(".column-status"),n=e.querySelector(".column-progress"),a=e.querySelector("td:nth-child(7)");let i=0;const o=(r=n==null?void 0:n.querySelector(".nuclen-progress-text"))==null?void 0:r.textContent;if(o){const f=o.match(/(\d+)%/);f&&(i=parseInt(f[1],10))}return{id:t,workflow_type:((d=e.querySelector("td:nth-child(4)"))==null?void 0:d.textContent)||"",status:this.extractStatusFromBadge((s==null?void 0:s.innerHTML)||""),progress:i,details:(a==null?void 0:a.innerHTML)||"",created_at:((g=e.querySelector("td:nth-child(1)"))==null?void 0:g.textContent)||"",scheduled_at:((p=e.querySelector("td:nth-child(2)"))==null?void 0:p.textContent)||"",failed:this.extractFailedCount((a==null?void 0:a.innerHTML)||"")}}extractStatusFromBadge(e){const t=e.match(/nuclen-badge-(\w+)/);if(t)switch(t[1]){case"warning":return e.includes("Pending")?"pending":"completed_with_errors";case"info":return"processing";case"success":return"completed";case"error":return"failed";default:return"cancelled"}return"unknown"}extractFailedCount(e){const t=e.match(/(\d+)\s+failed/);return t?parseInt(t[1],10):0}cleanup(){this.stopPolling(),this.countdownInterval&&(clearInterval(this.countdownInterval),this.countdownInterval=null),this.pollingIndicator&&this.pollingIndicator.remove(),this.autoRefreshBanner&&this.autoRefreshBanner.remove(),this.lastTasksData.clear(),this.activeTasks.clear(),document.removeEventListener("visibilitychange",this.handleVisibilityChange),window.removeEventListener("blur",this.handleWindowBlur),window.removeEventListener("focus",this.handleWindowFocus)}startSmartPolling(){if(!this.isPageVisible||this.activeTasks.size===0){this.updatePollingIndicator(!1);return}this.stopPolling(),this.pollingStartTime===0&&(this.pollingStartTime=Date.now());const e=Date.now()-this.pollingStartTime;let t=this.pollingConfig.initialInterval;for(const s of this.pollingConfig.intervals)e>s.after&&(t=s.interval);t=Math.min(t,this.pollingConfig.maxInterval),u(`Starting smart polling with interval: ${t/1e3}s, active tasks: ${this.activeTasks.size}`),this.nextPollTime=Date.now()+t,this.updatePollingIndicator(!0,t),this.startCountdown(),this.pollingTimer=window.setTimeout(()=>{this.pollForUpdates()},t)}stopPolling(){this.pollingTimer&&(clearTimeout(this.pollingTimer),this.pollingTimer=null),this.countdownInterval&&(clearInterval(this.countdownInterval),this.countdownInterval=null),this.updatePollingIndicator(!1)}async pollForUpdates(){if(!(!this.isPageVisible||this.isRefreshing))try{u("Polling for task updates...");const e=await fetch(ajaxurl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"nuclen_refresh_tasks_data",nonce:nuclen_tasks.nonce,page:this.currentPage.toString()})});if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const t=await e.json();t&&t.success&&t.data&&Array.isArray(t.data.tasks)&&(this.updateTasksFromPolling(t.data.tasks),t.data.tasks.length>0&&this.showUpdateIndicator())}catch(e){h("Failed to poll for updates:",e)}finally{this.activeTasks.size>0&&this.isPageVisible?this.startSmartPolling():this.activeTasks.size===0&&(this.pollingStartTime=0)}}updateTasksFromPolling(e){const t=new Set,s=100;if(this.lastTasksData.size>s){const n=[];this.lastTasksData.forEach((i,o)=>{!this.activeTasks.has(o)&&(i.status==="completed"||i.status==="cancelled"||i.status==="failed")&&n.push(o)});const a=Math.min(n.length,this.lastTasksData.size-s+10);n.slice(0,a).forEach(i=>this.lastTasksData.delete(i))}e.forEach(n=>{const a=this.lastTasksData.get(n.id);(!a||this.hasTaskChanged(a,n))&&(this.updateSingleTaskRow(n),t.add(n.id),this.lastTasksData.set(n.id,n)),n.status==="processing"||n.status==="pending"||n.status==="scheduled"?this.activeTasks.add(n.id):this.activeTasks.delete(n.id)}),t.size>0&&u(`Updated ${t.size} tasks: ${Array.from(t).join(", ")}`)}hasTaskChanged(e,t){return e.status!==t.status||e.progress!==t.progress||e.failed!==t.failed||e.details!==t.details}updateSingleTaskRow(e){document.querySelector(`tr[data-task-id="${e.id}"]`)&&this.updateTasksTable([e])}showUpdateIndicator(){let e=document.querySelector(".nuclen-update-indicator");if(!e){e=document.createElement("div"),e.className="nuclen-update-indicator",e.innerHTML='<span class="dashicons dashicons-update spin"></span> Updated';const t=document.querySelector(".wrap h1");t?t.appendChild(e):document.body.appendChild(e)}e.classList.add("visible"),setTimeout(()=>{e&&e.parentNode&&e.classList.remove("visible")},2e3)}attachActionHandlers(){document.querySelectorAll(".nuclen-run-now").forEach(e=>{e.addEventListener("click",t=>this.handleRunTask(t))}),document.querySelectorAll(".nuclen-cancel").forEach(e=>{e.addEventListener("click",t=>this.handleCancelTask(t))})}setupRefreshButton(){var n;const e=document.querySelector('a[href*="refresh=1"]');if(!e)return;const t=new URLSearchParams(window.location.search);this.currentPage=parseInt(t.get("paged")||"1",10);const s=document.createElement("button");s.className="button button-small nuclen-refresh-button",s.innerHTML='<span class="dashicons dashicons-update"></span> Refresh',s.title="Refresh task data",(n=e.parentNode)==null||n.replaceChild(s,e),s.addEventListener("click",a=>{a.preventDefault(),this.refreshTasksData()})}async refreshTasksData(){var e;if(!this.isRefreshing){this.isRefreshing=!0;try{const t=document.querySelector(".nuclen-refresh-button");t&&(t.classList.add("is-busy"),t.setAttribute("disabled","disabled"));const n=await(await fetch(ajaxurl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"nuclen_refresh_tasks_data",nonce:nuclen_tasks.nonce,page:this.currentPage.toString()})})).json();if(n.success&&n.data&&n.data.tasks)this.updateTasksFromPolling(n.data.tasks),this.showNotice("Tasks refreshed successfully","success"),this.pollingStartTime=Date.now(),this.activeTasks.size>0&&this.startSmartPolling();else throw new Error(((e=n.data)==null?void 0:e.message)||"Failed to refresh tasks")}catch(t){h("Failed to refresh tasks:",t),this.showNotice("Failed to refresh tasks. Please try again.","error")}finally{this.isRefreshing=!1;const t=document.querySelector(".nuclen-refresh-button");t&&(t.classList.remove("is-busy"),t.removeAttribute("disabled"))}}}updateTasksTable(e){const t=document.querySelector(".nuclen-tasks-table tbody");!t||e.length===0||e.forEach(s=>{const n=t.querySelector(`tr[data-task-id="${s.id}"]`);if(!n)return;const a=n.querySelector(".column-status");a&&(a.innerHTML=this.getStatusBadge(s.status));const i=n.querySelector(".column-progress");i&&(i.innerHTML=`
                    <div class="nuclen-progress-container">
                        <div class="nuclen-progress-bar">
                            <div class="nuclen-progress-fill" style="width: ${s.progress}%"></div>
                        </div>
                        <span class="nuclen-progress-text">${s.progress}%</span>
                    </div>
                `);const o=n.querySelector("td:nth-child(7)");if(o){let r=s.details;s.failed&&s.failed>0&&(r+=`<br><span class="nuclen-error-text">${s.failed} failed</span>`),o.innerHTML=r}this.updateActionButtons(n,s.status)})}async handleRunTask(e){e.preventDefault();const t=e.currentTarget,s=t.getAttribute("data-task-id");!s||this.isProcessing||await this.executeTaskAction("run_task",s,t)}async handleCancelTask(e){e.preventDefault();const t=e.currentTarget,s=t.getAttribute("data-task-id");!s||this.isProcessing||window.confirm("Are you sure you want to cancel this task?")&&await this.executeTaskAction("cancel_task",s,t)}async executeTaskAction(e,t,s){this.isProcessing=!0;const n=s.textContent||"",a=s.closest("tr");try{s.classList.add("disabled"),s.setAttribute("disabled","disabled"),e==="run_task"?s.textContent=nuclen_tasks.i18n.processing||"Processing...":s.textContent=nuclen_tasks.i18n.cancelling||"Cancelling...";const o=await(await fetch(ajaxurl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:`nuclen_${e}`,task_id:t,nonce:nuclen_tasks.nonce})})).json();if(o.success){if(this.showNotice(o.data.message||nuclen_tasks.i18n.success,"success"),e==="run_task"&&setTimeout(()=>{this.showNotice("Task is now processing. Refresh later to see the latest progress.","info")},500),a){if(e==="run_task"){const r=a.querySelector(".column-status");r&&(r.innerHTML=this.getStatusBadge("processing")),this.updateActionButtons(a,"processing"),this.activeTasks.add(t),this.startSmartPolling()}else if(e==="cancel_task"){const r=a.querySelector(".column-status");r&&(r.innerHTML=this.getStatusBadge("cancelled"));const d=a.querySelector(".column-actions");d&&(d.innerHTML='<span class="nuclen-no-actions">—</span>'),this.activeTasks.delete(t)}}}else{const r=nuclen_tasks.i18n.error||"An error occurred. Please try again.";throw new Error(r)}}catch(i){h("Task action failed:",i);const o=nuclen_tasks.i18n.error||"An error occurred. Please try again.";this.showNotice(o,"error"),s.textContent=n,s.classList.remove("disabled"),s.removeAttribute("disabled")}finally{this.isProcessing=!1}}getStatusBadge(e){return{pending:'<span class="nuclen-badge nuclen-badge-warning">Pending</span>',scheduled:'<span class="nuclen-badge nuclen-badge-warning">Scheduled</span>',processing:'<span class="nuclen-badge nuclen-badge-info">Processing</span>',completed:'<span class="nuclen-badge nuclen-badge-success">Completed</span>',completed_with_errors:'<span class="nuclen-badge nuclen-badge-warning">Completed with Errors</span>',failed:'<span class="nuclen-badge nuclen-badge-error">Failed</span>',cancelled:'<span class="nuclen-badge nuclen-badge-default">Cancelled</span>'}[e]||`<span class="nuclen-badge nuclen-badge-default">${e}</span>`}updateActionButtons(e,t){var n,a,i;const s=e.querySelector(".column-actions");if(s)if(s.innerHTML="",t==="pending"||t==="scheduled"){const o=e.getAttribute("data-task-id");o&&(s.innerHTML=`
                    <button class="button button-small nuclen-run-now" data-task-id="${o}">
                        Run Now
                    </button>
                    <button class="button button-small nuclen-cancel" data-task-id="${o}">
                        Cancel
                    </button>
                `,(n=s.querySelector(".nuclen-run-now"))==null||n.addEventListener("click",r=>this.handleRunTask(r)),(a=s.querySelector(".nuclen-cancel"))==null||a.addEventListener("click",r=>this.handleCancelTask(r)))}else if(t==="processing"){const o=e.getAttribute("data-task-id");o&&(s.innerHTML=`
                    <span class="spinner is-active"></span>
                    <button class="button button-small nuclen-cancel" data-task-id="${o}">
                        Cancel
                    </button>
                `,(i=s.querySelector(".nuclen-cancel"))==null||i.addEventListener("click",r=>this.handleCancelTask(r)))}else s.innerHTML='<span class="nuclen-no-actions">—</span>'}showNotice(e,t="info"){var a;let s=document.querySelector(".nuclen-tasks-notices");if(!s){s=document.createElement("div"),s.className="nuclen-tasks-notices";const i=document.querySelector(".wrap h1");i&&i.insertAdjacentElement("afterend",s)}const n=document.createElement("div");n.className=`notice notice-${t} is-dismissible`,n.innerHTML=`
            <p>${e}</p>
            <button type="button" class="notice-dismiss">
                <span class="screen-reader-text">Dismiss this notice.</span>
            </button>
        `,s.appendChild(n),(a=n.querySelector(".notice-dismiss"))==null||a.addEventListener("click",()=>{n.remove()}),setTimeout(()=>{n.remove()},5e3)}async checkRecentCompletions(){try{const t=await(await fetch(ajaxurl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"nuclen_get_recent_completions",nonce:nuclen_tasks.nonce})})).json();t.success&&t.data&&t.data.length>0&&t.data.forEach(s=>{if(s.status!=="completed"){if(s.status!=="completed_with_errors"){if(s.status!=="failed")return}}})}catch(e){h("Failed to check recent completions:",e)}}createPollingIndicator(){const e=document.createElement("div");e.className="nuclen-polling-indicator",e.innerHTML=`
            <span class="nuclen-polling-icon">
                <span class="dashicons dashicons-update"></span>
            </span>
            <span class="nuclen-polling-text">Auto-refresh: <span class="status">Inactive</span></span>
            <span class="nuclen-polling-countdown"></span>
        `;const t=document.querySelector(".nuclen-refresh-button");if(console.log("[Nuclear Engagement] Refresh button found:",t),t&&t.parentNode)t.parentNode.insertBefore(e,t.nextSibling),this.pollingIndicator=e,console.log("[Nuclear Engagement] Polling indicator added next to refresh button");else{const s=document.querySelector(".wrap h1");console.log("[Nuclear Engagement] Page title found:",s),s?(s.appendChild(e),this.pollingIndicator=e,console.log("[Nuclear Engagement] Polling indicator added to page title")):console.error("[Nuclear Engagement] Could not find location to insert polling indicator")}this.createAutoRefreshBanner()}createAutoRefreshBanner(){const e=document.createElement("div");e.className="nuclen-auto-refresh-banner",e.innerHTML=`
            <span class="dashicons dashicons-update"></span>
            <span>Auto-refresh active</span>
        `,document.body.appendChild(e),this.autoRefreshBanner=e}updatePollingIndicator(e,t){if(!this.pollingIndicator)return;const s=this.pollingIndicator.querySelector(".status"),n=this.pollingIndicator.querySelector(".nuclen-polling-icon"),a=this.pollingIndicator.querySelector(".nuclen-polling-countdown");if(e){if(this.pollingIndicator.classList.add("active"),s.textContent=`Active (${this.activeTasks.size} task${this.activeTasks.size!==1?"s":""})`,n.classList.add("spin"),t){const i=Math.floor(t/1e3);a.textContent=`Next refresh in ${i}s`}this.autoRefreshBanner&&!this.pollingIndicator.classList.contains("active")&&(this.autoRefreshBanner.classList.add("show"),setTimeout(()=>{this.autoRefreshBanner&&this.autoRefreshBanner.classList.remove("show")},3e3))}else this.pollingIndicator.classList.remove("active"),s.textContent="Inactive",n.classList.remove("spin"),a.textContent="",this.autoRefreshBanner&&this.autoRefreshBanner.classList.remove("show")}startCountdown(){this.countdownInterval&&clearInterval(this.countdownInterval),this.countdownInterval=window.setInterval(()=>{var s;const e=Math.max(0,Math.floor((this.nextPollTime-Date.now())/1e3)),t=(s=this.pollingIndicator)==null?void 0:s.querySelector(".nuclen-polling-countdown");t&&(e>0?t.textContent=`Next refresh in ${e}s`:t.textContent="Refreshing..."),e<=0&&this.countdownInterval&&(clearInterval(this.countdownInterval),this.countdownInterval=null)},1e3)}}document.addEventListener("DOMContentLoaded",()=>{console.log("[Nuclear Engagement] DOM ready, initializing TasksManager...");try{new T}catch(c){console.error("[Nuclear Engagement] Failed to initialize TasksManager:",c)}});
//# sourceMappingURL=nuclen-tasks.js.map
