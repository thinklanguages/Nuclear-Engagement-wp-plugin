var p=Object.defineProperty;var f=(l,t,n)=>t in l?p(l,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):l[t]=n;var u=(l,t,n)=>f(l,typeof t!="symbol"?t+"":t,n);import{e as h}from"../../logger-DwRZMuf8.js";class g{constructor(){u(this,"isProcessing",!1);u(this,"isRefreshing",!1);u(this,"currentPage",1);this.init()}init(){this.checkRecentCompletions(),this.attachActionHandlers(),this.setupRefreshButton()}attachActionHandlers(){document.querySelectorAll(".nuclen-run-now").forEach(t=>{t.addEventListener("click",n=>this.handleRunTask(n))}),document.querySelectorAll(".nuclen-cancel").forEach(t=>{t.addEventListener("click",n=>this.handleCancelTask(n))})}setupRefreshButton(){var s;const t=document.querySelector('a[href*="refresh=1"]');if(!t)return;const n=new URLSearchParams(window.location.search);this.currentPage=parseInt(n.get("paged")||"1",10);const e=document.createElement("button");e.className="button button-small nuclen-refresh-button",e.innerHTML='<span class="dashicons dashicons-update"></span> Refresh',e.title="Refresh task data",(s=t.parentNode)==null||s.replaceChild(e,t),e.addEventListener("click",a=>{a.preventDefault(),this.refreshTasksData()})}refreshTasksData(){window.location.reload()}updateTasksTable(t){const n=document.querySelector(".nuclen-tasks-table tbody");!n||t.length===0||t.forEach(e=>{const s=n.querySelector(`tr[data-task-id="${e.id}"]`);if(!s)return;const a=s.querySelector(".column-status");a&&(a.innerHTML=this.getStatusBadge(e.status));const r=s.querySelector(".column-progress");r&&(r.innerHTML=`
                    <div class="nuclen-progress-container">
                        <div class="nuclen-progress-bar">
                            <div class="nuclen-progress-fill" style="width: ${e.progress}%"></div>
                        </div>
                        <span class="nuclen-progress-text">${e.progress}%</span>
                    </div>
                `);const c=s.querySelector("td:nth-child(5)");if(c){let i=e.details;e.failed>0&&(i+=`<br><span class="nuclen-error-text">${e.failed} failed</span>`),c.innerHTML=i}this.updateActionButtons(s,e.status)})}async handleRunTask(t){t.preventDefault();const n=t.currentTarget,e=n.getAttribute("data-task-id");!e||this.isProcessing||await this.executeTaskAction("run_task",e,n)}async handleCancelTask(t){t.preventDefault();const n=t.currentTarget,e=n.getAttribute("data-task-id");!e||this.isProcessing||window.confirm("Are you sure you want to cancel this task?")&&await this.executeTaskAction("cancel_task",e,n)}async executeTaskAction(t,n,e){var r;this.isProcessing=!0;const s=e.textContent||"",a=e.closest("tr");try{e.classList.add("disabled"),e.setAttribute("disabled","disabled"),t==="run_task"?e.textContent=nuclen_tasks.i18n.running||"Running...":e.textContent=nuclen_tasks.i18n.cancelling||"Cancelling...";const i=await(await fetch(ajaxurl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:`nuclen_${t}`,task_id:n,nonce:nuclen_tasks.nonce})})).json();if(i.success){if(this.showNotice(i.data.message||nuclen_tasks.i18n.success,"success"),t==="run_task"&&setTimeout(()=>{this.showNotice("Task is now processing. Refresh later to see the latest progress.","info")},500),a){if(t==="run_task"){const o=a.querySelector(".column-status");o&&(o.innerHTML=this.getStatusBadge("processing")),this.updateActionButtons(a,"processing")}else if(t==="cancel_task"){const o=a.querySelector(".column-status");o&&(o.innerHTML=this.getStatusBadge("cancelled"));const d=a.querySelector(".column-actions");d&&(d.innerHTML='<span class="nuclen-no-actions">—</span>')}}}else throw new Error(((r=i.data)==null?void 0:r.message)||i.data||nuclen_tasks.i18n.error)}catch(c){h("Task action failed:",c),this.showNotice(c instanceof Error?c.message:nuclen_tasks.i18n.error,"error"),e.textContent=s,e.classList.remove("disabled"),e.removeAttribute("disabled")}finally{this.isProcessing=!1}}getStatusBadge(t){return{pending:'<span class="nuclen-badge nuclen-badge-warning">Pending</span>',processing:'<span class="nuclen-badge nuclen-badge-info">Processing</span>',completed:'<span class="nuclen-badge nuclen-badge-success">Completed</span>',completed_with_errors:'<span class="nuclen-badge nuclen-badge-warning">Completed with Errors</span>',failed:'<span class="nuclen-badge nuclen-badge-error">Failed</span>',cancelled:'<span class="nuclen-badge nuclen-badge-default">Cancelled</span>'}[t]||`<span class="nuclen-badge nuclen-badge-default">${t}</span>`}updateActionButtons(t,n){var s,a,r;const e=t.querySelector(".column-actions");if(e)if(e.innerHTML="",n==="pending"){const c=t.getAttribute("data-task-id");c&&(e.innerHTML=`
                    <button class="button button-small nuclen-run-now" data-task-id="${c}">
                        Run Now
                    </button>
                    <button class="button button-small nuclen-cancel" data-task-id="${c}">
                        Cancel
                    </button>
                `,(s=e.querySelector(".nuclen-run-now"))==null||s.addEventListener("click",i=>this.handleRunTask(i)),(a=e.querySelector(".nuclen-cancel"))==null||a.addEventListener("click",i=>this.handleCancelTask(i)))}else if(n==="processing"){const c=t.getAttribute("data-task-id");c&&(e.innerHTML=`
                    <span class="spinner is-active"></span>
                    <button class="button button-small nuclen-cancel" data-task-id="${c}">
                        Cancel
                    </button>
                `,(r=e.querySelector(".nuclen-cancel"))==null||r.addEventListener("click",i=>this.handleCancelTask(i)))}else e.innerHTML='<span class="nuclen-no-actions">—</span>'}showNotice(t,n="info"){var a;let e=document.querySelector(".nuclen-tasks-notices");if(!e){e=document.createElement("div"),e.className="nuclen-tasks-notices";const r=document.querySelector(".wrap h1");r&&r.insertAdjacentElement("afterend",e)}const s=document.createElement("div");s.className=`notice notice-${n} is-dismissible`,s.innerHTML=`
            <p>${t}</p>
            <button type="button" class="notice-dismiss">
                <span class="screen-reader-text">Dismiss this notice.</span>
            </button>
        `,e.appendChild(s),(a=s.querySelector(".notice-dismiss"))==null||a.addEventListener("click",()=>{s.remove()}),setTimeout(()=>{s.remove()},5e3)}async checkRecentCompletions(){try{const n=await(await fetch(ajaxurl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"nuclen_get_recent_completions",nonce:nuclen_tasks.nonce})})).json();n.success&&n.data&&n.data.length>0&&n.data.forEach(e=>{let s,a;if(e.status==="completed")s=`Generation ${e.task_id} completed successfully!`,a="success";else if(e.status==="completed_with_errors"){const r=e.fail_count||"some";s=`Generation ${e.task_id} completed with ${r} errors. Check individual posts for details.`,a="info"}else if(e.status==="failed")s=`Generation ${e.task_id} failed.`,a="error";else return})}catch(t){h("Failed to check recent completions:",t)}}}document.addEventListener("DOMContentLoaded",()=>{new g});
//# sourceMappingURL=nuclen-tasks.js.map
