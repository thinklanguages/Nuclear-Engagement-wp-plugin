/**
 * Modern CSS Features - Nuclear Engagement Plugin
 * 
 * Progressive enhancement with modern CSS features.
 * Includes CSS Grid, Container Queries, and advanced selectors.
 */

/* === CONTAINER QUERIES === */

/* Quiz container queries */
@supports (container-type: inline-size) {
  .c-quiz {
    container-type: inline-size;
    container-name: quiz;
  }
  
  /* Responsive quiz layout based on container size */
  @container quiz (max-width: 480px) {
    .c-quiz__answers--columns {
      grid-template-columns: 1fr;
    }
    
    .c-quiz-answer {
      padding: var(--ne-space-3);
      font-size: var(--ne-font-size-sm);
    }
    
    .c-quiz__title {
      font-size: var(--ne-font-size-lg);
    }
  }
  
  @container quiz (min-width: 600px) {
    .c-quiz__answers--auto {
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    }
    
    .c-quiz__question {
      font-size: var(--ne-font-size-xl);
    }
  }
}

/* Admin container queries */
@supports (container-type: inline-size) {
  .c-admin {
    container-type: inline-size;
    container-name: admin;
  }
  
  @container admin (max-width: 768px) {
    .c-form-field--row {
      grid-template-columns: 1fr;
    }
    
    .c-admin-tabs__list {
      flex-direction: column;
    }
  }
  
  @container admin (min-width: 1200px) {
    .c-admin-form {
      display: grid;
      grid-template-columns: 1fr 300px;
      gap: var(--ne-space-8);
    }
  }
}

/* TOC container queries */
@supports (container-type: inline-size) {
  .c-toc {
    container-type: inline-size;
    container-name: toc;
  }
  
  @container toc (max-width: 280px) {
    .c-toc__content {
      max-height: 200px;
    }
    
    .c-toc__link {
      padding: var(--ne-space-1) var(--ne-space-2);
      font-size: var(--ne-font-size-xs);
    }
  }
}

/* === CSS GRID ADVANCED LAYOUTS === */

/* Masonry layout with CSS Grid (where supported) */
@supports (grid-template-rows: masonry) {
  .ne-masonry-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    grid-template-rows: masonry;
    gap: var(--ne-space-4);
  }
}

/* Subgrid support */
@supports (grid-template-columns: subgrid) {
  .ne-subgrid {
    display: grid;
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
  }
}

/* Advanced grid areas */
.ne-grid-advanced {
  display: grid;
  grid-template-areas:
    "header header header"
    "sidebar main aside"
    "footer footer footer";
  grid-template-columns: 200px 1fr 150px;
  grid-template-rows: auto 1fr auto;
  gap: var(--ne-space-4);
  min-height: 100vh;
}

.ne-grid-advanced__header {
  grid-area: header;
}

.ne-grid-advanced__sidebar {
  grid-area: sidebar;
}

.ne-grid-advanced__main {
  grid-area: main;
}

.ne-grid-advanced__aside {
  grid-area: aside;
}

.ne-grid-advanced__footer {
  grid-area: footer;
}

/* === ADVANCED SELECTORS === */

/* :has() pseudo-class support */
@supports selector(:has(+ *)) {
  /* Quiz with progress bar */
  .c-quiz:has(.c-quiz-progress) {
    padding-top: var(--ne-space-8);
  }
  
  /* Form field with error */
  .c-form-field:has(.c-form-field__error) {
    --form-field-border: var(--ne-color-error-500);
  }
  
  /* Quiz without actions */
  .c-quiz:not(:has(.c-quiz-actions)) {
    padding-bottom: var(--ne-space-4);
  }
  
  /* Admin form with multiple sections */
  .c-admin-form:has(.c-admin-form__section + .c-admin-form__section) {
    padding: var(--ne-space-8);
  }
}

/* :is() and :where() selectors */
@supports selector(:is(h1, h2, h3)) {
  .c-quiz :is(h1, h2, h3, h4, h5, h6) {
    color: var(--ne-text-primary);
    margin-bottom: var(--ne-space-3);
  }
  
  .c-admin :is(.c-form-field__input, .c-form-field__select, .c-form-field__textarea) {
    transition: border-color var(--ne-duration-200) var(--ne-ease-out);
  }
}

@supports selector(:where(button, input)) {
  /* Lower specificity default styles */
  :where(.c-quiz-button, .c-admin-button) {
    font-family: inherit;
    font-size: inherit;
  }
}

/* === LOGICAL PROPERTIES === */

/* Use logical properties for internationalization */
.ne-logical {
  margin-inline: var(--ne-space-4);
  margin-block: var(--ne-space-2);
  padding-inline: var(--ne-space-6);
  padding-block: var(--ne-space-4);
  border-inline-start: 3px solid var(--ne-color-primary-500);
  border-block-end: 1px solid var(--ne-border-primary);
}

.ne-logical-text {
  text-align: start;
  border-inline-end: 1px solid var(--ne-border-primary);
}

/* === MODERN COLOR FUNCTIONS === */

/* Color mixing */
@supports (color: color-mix(in srgb, red 50%, blue)) {
  .ne-color-mix {
    --mixed-primary: color-mix(in srgb, var(--ne-color-primary-500) 80%, white);
    --mixed-hover: color-mix(in srgb, var(--ne-color-primary-500) 90%, black);
    background: var(--mixed-primary);
  }
  
  .ne-color-mix:hover {
    background: var(--mixed-hover);
  }
}

/* Relative color syntax */
@supports (color: rgb(from white r g b / 0.5)) {
  .ne-relative-color {
    --primary-transparent: rgb(from var(--ne-color-primary-500) r g b / 0.1);
    --primary-lighter: hsl(from var(--ne-color-primary-500) h s calc(l + 20%));
    background: var(--primary-transparent);
    border-color: var(--primary-lighter);
  }
}

/* === ADVANCED LAYOUT === */

/* CSS Anchor Positioning */
@supports (anchor-name: --anchor) {
  .ne-anchor-target {
    anchor-name: --tooltip-anchor;
    position: relative;
  }
  
  .ne-tooltip {
    position: absolute;
    position-anchor: --tooltip-anchor;
    bottom: anchor(top);
    left: anchor(center);
    transform: translateX(-50%);
  }
}

/* CSS Nesting */
@supports (color: rgb(0 0 0)) {
  .ne-nested {
    background: var(--ne-bg-primary);
    border: 1px solid var(--ne-border-primary);
    
    /* Nested selectors */
    & .ne-nested__title {
      color: var(--ne-text-primary);
      font-weight: var(--ne-font-weight-semibold);
      
      &:hover {
        color: var(--ne-color-primary-600);
      }
    }
    
    & .ne-nested__content {
      padding: var(--ne-space-4);
      
      & p {
        margin-bottom: var(--ne-space-3);
        
        &:last-child {
          margin-bottom: 0;
        }
      }
    }
    
    @media (min-width: 768px) {
      & {
        display: grid;
        grid-template-columns: 1fr 2fr;
        gap: var(--ne-space-6);
      }
    }
  }
}

/* === MODERN UNITS === */

/* Container query units */
.ne-cq-units {
  font-size: clamp(1rem, 4cqw, 2rem);
  padding: 2cqh 4cqw;
  margin: 1cqi;
}

/* Dynamic viewport units */
.ne-dynamic-viewport {
  min-height: 100dvh; /* Dynamic viewport height */
  width: 100dvw;      /* Dynamic viewport width */
  padding: 1svh 1svw; /* Small viewport units */
  margin: 1lvh 1lvw;  /* Large viewport units */
}

/* === MODERN PSEUDO-ELEMENTS === */

/* ::backdrop for modals */
@supports selector(::backdrop) {
  .ne-modal::backdrop {
    background: rgb(0 0 0 / 0.5);
    backdrop-filter: blur(4px);
  }
}

/* ::marker for lists */
@supports selector(::marker) {
  .ne-custom-marker::marker {
    color: var(--ne-color-primary-500);
    font-size: 1.2em;
  }
}

/* === MODERN FUNCTIONS === */

/* Math functions */
.ne-math {
  width: min(100%, 600px);
  height: max(200px, 20vh);
  padding: clamp(1rem, 4vw, 2rem);
  font-size: calc(1rem + 0.5vw);
  margin: clamp(1rem, 4%, 3rem) auto;
}

/* Round function */
@supports (width: round(10.7px, 1px)) {
  .ne-round {
    width: round(var(--dynamic-width), 1px);
    height: round(var(--dynamic-height), 1px);
  }
}

/* === PROGRESSIVE ENHANCEMENT UTILITIES === */

/* Feature detection classes */
.ne-supports-grid {
  display: block;
}

@supports (display: grid) {
  .ne-supports-grid {
    display: grid;
  }
  
  .ne-no-grid {
    display: none;
  }
}

.ne-supports-flexbox {
  display: block;
}

@supports (display: flex) {
  .ne-supports-flexbox {
    display: flex;
  }
  
  .ne-no-flexbox {
    display: none;
  }
}

/* Container query support */
@supports (container-type: inline-size) {
  .ne-supports-cq {
    display: block;
  }
  
  .ne-no-cq {
    display: none;
  }
}

/* === EXPERIMENTAL FEATURES === */

/* View transitions */
@supports (view-transition-name: slide) {
  .ne-view-transition {
    view-transition-name: slide;
  }
  
  ::view-transition-old(slide) {
    animation: slide-out 0.3s ease-out;
  }
  
  ::view-transition-new(slide) {
    animation: slide-in 0.3s ease-in;
  }
  
  @keyframes slide-out {
    to { transform: translateX(-100%); }
  }
  
  @keyframes slide-in {
    from { transform: translateX(100%); }
    to { transform: translateX(0); }
  }
}

/* CSS Layers */
@layer base, components, utilities;

@layer base {
  .ne-base {
    font-family: var(--ne-font-family-sans);
    color: var(--ne-text-primary);
  }
}

@layer components {
  .ne-component {
    background: var(--ne-bg-primary);
    border: 1px solid var(--ne-border-primary);
  }
}

@layer utilities {
  .ne-utility {
    margin: 0 !important;
  }
}

/* === BROWSER-SPECIFIC ENHANCEMENTS === */

/* Safari-specific optimizations */
@supports (-webkit-backdrop-filter: blur(10px)) {
  .ne-safari-blur {
    -webkit-backdrop-filter: blur(10px);
    backdrop-filter: blur(10px);
  }
}

/* Firefox-specific optimizations */
@supports (-moz-appearance: none) {
  .ne-firefox-scroll {
    scrollbar-width: thin;
    scrollbar-color: var(--ne-border-primary) transparent;
  }
}

/* Chromium-specific optimizations */
@supports (-webkit-mask: url()) {
  .ne-webkit-mask {
    -webkit-mask: linear-gradient(
      to right,
      transparent 0%,
      black 10%,
      black 90%,
      transparent 100%
    );
  }
}

/* === FUTURE-PROOFING === */

/* Placeholder for future CSS features */
.ne-future-ready {
  /* Ready for new CSS features */
}

/* Graceful degradation patterns */
.ne-graceful-fallback {
  /* Fallback styles */
  background: var(--ne-bg-primary);
  
  /* Enhanced styles with feature detection */
  background: var(--enhanced-bg, var(--ne-bg-primary));
}

/* === BUILD SYSTEM INTEGRATION HINTS === */

/* PostCSS processing hints */
.ne-postcss-process {
  /* autoprefixer will handle vendor prefixes */
  user-select: none;
  
  /* cssnano will optimize this */
  margin: 1rem 1rem 1rem 1rem;
  
  /* Custom properties for processing */
  --processed: true;
}

/* PurgeCSS/UnCSS preservation */
/* purgecss start ignore */
.ne-preserve-utility {
  display: block;
}
/* purgecss end ignore */

/* Critical CSS extraction hints */
.ne-critical-extract {
  /* Mark for critical CSS extraction */
}

.ne-non-critical {
  /* Mark for deferred loading */
}